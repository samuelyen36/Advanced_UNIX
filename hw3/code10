=========Q11(2510)==============
mov eax,[0x600000]
mov ebx,[0x600004]
add eax,ebx
mov ebx,[0x600008]
mul ebx
mov [0x60000c],eax
=========Q11(2510)==============

=========Q12(2511)==============
mov eax,[0x600000]
neg eax
mov ebx,[0x600004]
mul ebx
mov ebx,[0x600008]
add eax,ebx
=========Q12(2511)==============


=========Q13(2512)==============
mov eax,[0x600000]
mov ebx,5
mul ebx
mov edx,0
mov ecx,[0x600004]
mov ebx,3
sub ecx,ebx
div ecx
mov [0x600008],eax
=========Q13(2512)==============


=========Q14(2513)==============
mov eax,[0x600004]
mov ebx,[0x600008]
neg eax
cdq
idiv ebx
mov ecx,edx

mov eax,[0x600000]
mov ebx,5
mul ebx
neg eax
cdq

idiv ecx
mov [0x60000c],eax
=========Q14(2513)==============


=========Q15(2514)==============
mov ecx,[0x600008]
sub ecx,ebx

mov eax,[0x600000]
mov ebx,[0x600004]
neg ebx
imul ebx
mov edx,0

cdq
idiv ecx
mov [0x600008],eax
=========Q15(2514)==============

=====Q16(2515)=====
call a
a:
mov eax,[esp]
=====Q16(2515)=====


=====Q17(2516)=====
mov eax,[0x600000]
mov ebx,26
mul ebx
mov [0x600004],eax
=====Q17(2516)=====

=====Q18(2517)=====
cmp eax,0
JNLE L1
mov edx,0xffffffff
mov [0x600000],edx
JMP L2		
L1:
mov edx,1
mov [0x600000],edx
L2:

cmp ebx,0
JNLE L3
mov edx,0xffffffff
mov [0x600004],edx
JMP L4		
L3:
mov edx,1
mov [0x600004],edx
L4:

cmp ecx,0
JNLE L5
mov edx,0xffffffff
mov [0x600008],edx
JMP L6	
L5:
mov edx,1
mov [0x600008],edx
L6:

cmp edx,0
JNLE L7
mov eax,0xffffffff
mov [0x60000c],eax
JMP L8
L7:
mov eax,1
mov [0x60000c],eax
L8:
=====Q18(2517)=====


=====Q19(2518)=====
    mov rbx, 16
    mov rdx,0
    jmp entry

    val_0_1:    ;store value to rax
    mov rcx,0
    cmp rbx,rcx ;equals to 0, put 0 into rax
    je v0
    mov rax,1
    jmp end_val_0_1
    v0:
    mov rax,0
    end_val_0_1:
    ret


    compu:  ;rax as return value, use rbx as input param and use rcx and rdx as local
    mov rcx,1
    cmp rbx,rcx     ;check if it's less than or equals to 0
    ja normal_case
    call val_0_1    ;(if below or equal)
    ret

    normal_case:
    sub rbx,1   ;n-1

    push rbx
    push rcx
    push rdx
    call compu
    pop rdx
    pop rcx
    pop rbx

    mov rdx,2
    mul rdx ;rax now store (2*r(n-1))
    mov rcx,rax ;mov 2*r(n-1) to rcx    and we'll use it later

    sub rbx,1   ;n-2

    push rbx
    push rcx
    push rdx
    call compu
    pop rdx
    pop rcx
    pop rbx

    mov rdx,3
    mul rdx
    add rax,rcx ;rcx stores the previous result
    ret


    entry:
        call compu
=====Q19(2518)=====
